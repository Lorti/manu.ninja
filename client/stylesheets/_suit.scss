/*! normalize.css v3.0.1 | MIT License | git.io/normalize */

/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
    font-family: sans-serif;
    /* 1 */
    -ms-text-size-adjust: 100%;
    /* 2 */
    -webkit-text-size-adjust: 100%;
    /* 2 */
}

/**
 * Remove default margin.
 */

body {
    margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
    display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */

audio,
canvas,
progress,
video {
    display: inline-block;
    /* 1 */
    vertical-align: baseline;
    /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */

[hidden],
template {
    display: none;
}

/* Links
   ========================================================================== */

/**
 * Remove the gray background color from active links in IE 10.
 */

a {
    background: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
    outline: 0;
}

/* Text-level semantics
   ========================================================================== */

/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */

abbr[title] {
    border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */

b,
strong {
    font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */

dfn {
    font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */

h1 {
    font-size: 2em;
    margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */

mark {
    background: #ff0;
    color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
    font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove border when inside `a` element in IE 8/9/10.
 */

img {
    border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */

svg:not(:root) {
    overflow: hidden;
}

/* Grouping content
   ========================================================================== */

/**
 * Address margin not present in IE 8/9 and Safari.
 */

figure {
    margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */

hr {
    box-sizing: content-box;
    height: 0;
}

/**
 * Contain overflow in all browsers.
 */

pre {
    overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */

code,
kbd,
pre,
samp {
    font-family: monospace, monospace;
    font-size: 1em;
}

/* Forms
   ========================================================================== */

/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */

/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */

button,
input,
optgroup,
select,
textarea {
    color: inherit;
    /* 1 */
    font: inherit;
    /* 2 */
    margin: 0;
    /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */

button {
    overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */

button,
select {
    text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */

button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button;
    /* 2 */
    cursor: pointer;
    /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
    cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

input {
    line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box;
    /* 1 */
    padding: 0;
    /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
    height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
    -webkit-appearance: textfield;
    /* 1 */
    /* 2 */
    box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */

legend {
    border: 0;
    /* 1 */
    padding: 0;
    /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */

textarea {
    overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */

optgroup {
    font-weight: bold;
}

/* Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
    border-collapse: collapse;
    border-spacing: 0;
}

td,
th {
    padding: 0;
}



/**
 * A thin layer on top of normalize.css that provides a starting point more
 * suitable for web applications. Removes the default spacing and border for
 * appropriate elements.
 */

html {
    background: inherit;
    color: inherit;
    font: 16px sans-serif;
}

a {
    color: #069;
    text-decoration: none;
}

a:hover,
a:focus,
a:active {
    color: #069;
    text-decoration: underline;
}

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
figure,
p,
pre {
    margin: 0;
}

button {
    background: transparent;
    border: 0;
    padding: 0;
}

/**
 * Work around a Firefox/IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 */

button:focus {
    outline: 1px dotted;
    outline: 5px auto -webkit-focus-ring-color;
}

fieldset {
    border: 0;
    margin: 0;
    padding: 0;
}

iframe {
    border: 0;
}

ol,
ul {
    list-style: none;
    margin: 0;
    padding: 0;
}

/**
 * Suppress the focus outline on links that cannot be accessed via keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 */

[tabindex="-1"]:focus {
    outline: none !important;
}

/**
 * Vertical alignment utilities
 * Depends on an appropriate `display` value.
 */

.u-alignBaseline {
    vertical-align: baseline !important;
}

.u-alignBottom {
    vertical-align: bottom !important;
}

.u-alignMiddle {
    vertical-align: middle !important;
}

.u-alignTop {
    vertical-align: top !important;
}

/**
 * Display-type utilities
 */

.u-block {
    display: block !important;
}

.u-hidden {
    display: none !important;
}

/**
 * Completely remove from the flow but leave available to screen readers.
 */

.u-hiddenVisually {
    position: absolute !important;
    overflow: hidden !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
}

.u-inline {
    display: inline !important;
}

/**
 * 1. Fix for Firefox bug: an image styled `max-width:100%` within an
 * inline-block will display at its default size, and not limit its width to
 * 100% of an ancestral container.
 */

.u-inlineBlock {
    display: inline-block !important;
    max-width: 100%;
    /* 1 */
}

.u-table {
    display: table !important;
}

.u-tableCell {
    display: table-cell !important;
}

.u-tableRow {
    display: table-row !important;
}

/**
 * Contain floats
 *
 * Make an element expand to contain floated children.
 * Uses pseudo-elements (micro clearfix).
 *
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of the
 *    element.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */

.u-cf:before,
.u-cf:after {
    content: " ";
    /* 1 */
    display: table;
    /* 2 */
}

.u-cf:after {
    clear: both;
}

/**
 * New block formatting context
 *
 * This affords some useful properties to the element. It won't wrap under
 * floats. Will also contain any floated children.

 * N.B. This will clip overflow. Use the alternative method below if this is
 * problematic.
 */

.u-nbfc {
    overflow: hidden !important;
}

/**
 * New block formatting context (alternative)
 *
 * Alternative method when overflow must not be clipped.
 *
 * 1. Create a new block formatting context (NBFC).
 * 2. Avoid shrink-wrap behaviour of table-cell.
 *
 * N.B. This breaks down in some browsers when elements within this element
 * exceed its width.
 */

.u-nbfcAlt {
    display: table-cell !important;
    /* 1 */
    width: 10000px !important;
    /* 2 */
}

/**
 * Floats
 */

.u-floatLeft {
    float: left !important;
}

.u-floatRight {
    float: right !important;
}

/**
 * Clean link
 *
 * A link without any text-decoration at all.
 */

.u-linkClean,
.u-linkClean:hover,
.u-linkClean:focus,
.u-linkClean:active {
    text-decoration: none !important;
}

/**
 * Link complex
 *
 * A common pattern is to have a link with several pieces of text and/or an
 * icon, where only one piece of text should display the underline when the
 * link is the subject of user interaction.
 *
 * Example HTML:
 *
 * <a class="u-linkComplex" href="#">
 *   Link complex
 *   <span class="u-linkComplexTarget">target</span>
 * </a>
 */

.u-linkComplex,
.u-linkComplex:hover,
.u-linkComplex:focus,
.u-linkComplex:active {
    text-decoration: none !important;
}

.u-linkComplex:hover .u-linkComplexTarget,
.u-linkComplex:focus .u-linkComplexTarget,
.u-linkComplex:active .u-linkComplexTarget {
    text-decoration: underline !important;
}

/**
 * Block-level link
 *
 * Combination of traits commonly used in vertical navigation lists.
 */

.u-linkBlock,
.u-linkBlock:hover,
.u-linkBlock:focus,
.u-linkBlock:active {
    display: block !important;
    text-decoration: none !important;
}

/**
 * Specify the proportional offset after an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 4, 5, 6, 8, 10, 12 section
 */

.u-after1of12 {
    margin-right: 8.333333333333332% !important;
}

.u-after1of10 {
    margin-right: 10% !important;
}

.u-after1of8 {
    margin-right: 12.5% !important;
}

.u-after1of6,
.u-after2of12 {
    margin-right: 16.666666666666664% !important;
}

.u-after1of5,
.u-after2of10 {
    margin-right: 20% !important;
}

.u-after1of4,
.u-after2of8,
.u-after3of12 {
    margin-right: 25% !important;
}

.u-after3of10 {
    margin-right: 30% !important;
}

.u-after1of3,
.u-after2of6,
.u-after4of12 {
    margin-right: 33.33333333333333% !important;
}

.u-after3of8 {
    margin-right: 37.5% !important;
}

.u-after2of5,
.u-after4of10 {
    margin-right: 40% !important;
}

.u-after5of12 {
    margin-right: 41.66666666666667% !important;
}

.u-after1of2,
.u-after2of4,
.u-after3of6,
.u-after4of8,
.u-after5of10,
.u-after6of12 {
    margin-right: 50% !important;
}

.u-after7of12 {
    margin-right: 58.333333333333336% !important;
}

.u-after3of5,
.u-after6of10 {
    margin-right: 60% !important;
}

.u-after5of8 {
    margin-right: 62.5% !important;
}

.u-after2of3,
.u-after4of6,
.u-after8of12 {
    margin-right: 66.66666666666666% !important;
}

.u-after7of10 {
    margin-right: 70% !important;
}

.u-after3of4,
.u-after6of8,
.u-after9of12 {
    margin-right: 75% !important;
}

.u-after4of5,
.u-after8of10 {
    margin-right: 80% !important;
}

.u-after5of6,
.u-after10of12 {
    margin-right: 83.33333333333334% !important;
}

.u-after7of8 {
    margin-right: 87.5% !important;
}

.u-after9of10 {
    margin-right: 90% !important;
}

.u-after11of12 {
    margin-right: 91.66666666666666% !important;
}

/**
 * Offset: breakpoint 1 (small)
 *
 * Specify the proportional offset after an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 4, 5, 6, 8, 10, 12 section
 */

@media (min-width:320px) and (max-width:640px) {
    .u-sm-afterNone {
        margin-left: 0 !important;
    }

    .u-sm-after1of12 {
        margin-right: 8.333333333333332% !important;
    }

    .u-sm-after1of10 {
        margin-right: 10% !important;
    }

    .u-sm-after1of8 {
        margin-right: 12.5% !important;
    }

    .u-sm-after1of6,
    .u-sm-after2of12 {
        margin-right: 16.666666666666664% !important;
    }

    .u-sm-after1of5,
    .u-sm-after2of10 {
        margin-right: 20% !important;
    }

    .u-sm-after1of4,
    .u-sm-after2of8,
    .u-sm-after3of12 {
        margin-right: 25% !important;
    }

    .u-sm-after3of10 {
        margin-right: 30% !important;
    }

    .u-sm-after1of3,
    .u-sm-after2of6,
    .u-sm-after4of12 {
        margin-right: 33.33333333333333% !important;
    }

    .u-sm-after3of8 {
        margin-right: 37.5% !important;
    }

    .u-sm-after2of5,
    .u-sm-after4of10 {
        margin-right: 40% !important;
    }

    .u-sm-after5of12 {
        margin-right: 41.66666666666667% !important;
    }

    .u-sm-after1of2,
    .u-sm-after2of4,
    .u-sm-after3of6,
    .u-sm-after4of8,
    .u-sm-after5of10,
    .u-sm-after6of12 {
        margin-right: 50% !important;
    }

    .u-sm-after7of12 {
        margin-right: 58.333333333333336% !important;
    }

    .u-sm-after3of5,
    .u-sm-after6of10 {
        margin-right: 60% !important;
    }

    .u-sm-after5of8 {
        margin-right: 62.5% !important;
    }

    .u-sm-after2of3,
    .u-sm-after4of6,
    .u-sm-after8of12 {
        margin-right: 66.66666666666666% !important;
    }

    .u-sm-after7of10 {
        margin-right: 70% !important;
    }

    .u-sm-after3of4,
    .u-sm-after6of8,
    .u-sm-after9of12 {
        margin-right: 75% !important;
    }

    .u-sm-after4of5,
    .u-sm-after8of10 {
        margin-right: 80% !important;
    }

    .u-sm-after5of6,
    .u-sm-after10of12 {
        margin-right: 83.33333333333334% !important;
    }

    .u-sm-after7of8 {
        margin-right: 87.5% !important;
    }

    .u-sm-after9of10 {
        margin-right: 90% !important;
    }

    .u-sm-after11of12 {
        margin-right: 91.66666666666666% !important;
    }
}

/**
 * Offset: breakpoint 2 (medium)
 *
 * Specify the proportional offset after an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 4, 5, 6, 8, 10, 12 section
 */

@media (min-width:640px) and (max-width:960px) {
    .u-md-afterNone {
        margin-left: 0 !important;
    }

    .u-md-after1of12 {
        margin-right: 8.333333333333332% !important;
    }

    .u-md-after1of10 {
        margin-right: 10% !important;
    }

    .u-md-after1of8 {
        margin-right: 12.5% !important;
    }

    .u-md-after1of6,
    .u-md-after2of12 {
        margin-right: 16.666666666666664% !important;
    }

    .u-md-after1of5,
    .u-md-after2of10 {
        margin-right: 20% !important;
    }

    .u-md-after1of4,
    .u-md-after2of8,
    .u-md-after3of12 {
        margin-right: 25% !important;
    }

    .u-md-after3of10 {
        margin-right: 30% !important;
    }

    .u-md-after1of3,
    .u-md-after2of6,
    .u-md-after4of12 {
        margin-right: 33.33333333333333% !important;
    }

    .u-md-after3of8 {
        margin-right: 37.5% !important;
    }

    .u-md-after2of5,
    .u-md-after4of10 {
        margin-right: 40% !important;
    }

    .u-md-after5of12 {
        margin-right: 41.66666666666667% !important;
    }

    .u-md-after1of2,
    .u-md-after2of4,
    .u-md-after3of6,
    .u-md-after4of8,
    .u-md-after5of10,
    .u-md-after6of12 {
        margin-right: 50% !important;
    }

    .u-md-after7of12 {
        margin-right: 58.333333333333336% !important;
    }

    .u-md-after3of5,
    .u-md-after6of10 {
        margin-right: 60% !important;
    }

    .u-md-after5of8 {
        margin-right: 62.5% !important;
    }

    .u-md-after2of3,
    .u-md-after4of6,
    .u-md-after8of12 {
        margin-right: 66.66666666666666% !important;
    }

    .u-md-after7of10 {
        margin-right: 70% !important;
    }

    .u-md-after3of4,
    .u-md-after6of8,
    .u-md-after9of12 {
        margin-right: 75% !important;
    }

    .u-md-after4of5,
    .u-md-after8of10 {
        margin-right: 80% !important;
    }

    .u-md-after5of6,
    .u-md-after10of12 {
        margin-right: 83.33333333333334% !important;
    }

    .u-md-after7of8 {
        margin-right: 87.5% !important;
    }

    .u-md-after9of10 {
        margin-right: 90% !important;
    }

    .u-md-after11of12 {
        margin-right: 91.66666666666666% !important;
    }
}

/**
 * Offset: breakpoint 3 (large)
 *
 * Specify the proportional offset after an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 4, 5, 6, 8, 10, 12 section
 */

@media (min-width:960px) {
    .u-lg-afterNone {
        margin-left: 0 !important;
    }

    .u-lg-after1of12 {
        margin-right: 8.333333333333332% !important;
    }

    .u-lg-after1of10 {
        margin-right: 10% !important;
    }

    .u-lg-after1of8 {
        margin-right: 12.5% !important;
    }

    .u-lg-after1of6,
    .u-lg-after2of12 {
        margin-right: 16.666666666666664% !important;
    }

    .u-lg-after1of5,
    .u-lg-after2of10 {
        margin-right: 20% !important;
    }

    .u-lg-after1of4,
    .u-lg-after2of8,
    .u-lg-after3of12 {
        margin-right: 25% !important;
    }

    .u-lg-after3of10 {
        margin-right: 30% !important;
    }

    .u-lg-after1of3,
    .u-lg-after2of6,
    .u-lg-after4of12 {
        margin-right: 33.33333333333333% !important;
    }

    .u-lg-after3of8 {
        margin-right: 37.5% !important;
    }

    .u-lg-after2of5,
    .u-lg-after4of10 {
        margin-right: 40% !important;
    }

    .u-lg-after5of12 {
        margin-right: 41.66666666666667% !important;
    }

    .u-lg-after1of2,
    .u-lg-after2of4,
    .u-lg-after3of6,
    .u-lg-after4of8,
    .u-lg-after5of10,
    .u-lg-after6of12 {
        margin-right: 50% !important;
    }

    .u-lg-after7of12 {
        margin-right: 58.333333333333336% !important;
    }

    .u-lg-after3of5,
    .u-lg-after6of10 {
        margin-right: 60% !important;
    }

    .u-lg-after5of8 {
        margin-right: 62.5% !important;
    }

    .u-lg-after2of3,
    .u-lg-after4of6,
    .u-lg-after8of12 {
        margin-right: 66.66666666666666% !important;
    }

    .u-lg-after7of10 {
        margin-right: 70% !important;
    }

    .u-lg-after3of4,
    .u-lg-after6of8,
    .u-lg-after9of12 {
        margin-right: 75% !important;
    }

    .u-lg-after4of5,
    .u-lg-after8of10 {
        margin-right: 80% !important;
    }

    .u-lg-after5of6,
    .u-lg-after10of12 {
        margin-right: 83.33333333333334% !important;
    }

    .u-lg-after7of8 {
        margin-right: 87.5% !important;
    }

    .u-lg-after9of10 {
        margin-right: 90% !important;
    }

    .u-lg-after11of12 {
        margin-right: 91.66666666666666% !important;
    }
}

/**
 * Specify the proportional offset before an object.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 section
 */

.u-before1of12 {
    margin-left: 8.333333333333332% !important;
}

.u-before1of10 {
    margin-left: 10% !important;
}

.u-before1of8 {
    margin-left: 12.5% !important;
}

.u-before1of6,
.u-before2of12 {
    margin-left: 16.666666666666664% !important;
}

.u-before1of5,
.u-before2of10 {
    margin-left: 20% !important;
}

.u-before1of4,
.u-before2of8,
.u-before3of12 {
    margin-left: 25% !important;
}

.u-before3of10 {
    margin-left: 30% !important;
}

.u-before1of3,
.u-before2of6,
.u-before4of12 {
    margin-left: 33.33333333333333% !important;
}

.u-before3of8 {
    margin-left: 37.5% !important;
}

.u-before2of5,
.u-before4of10 {
    margin-left: 40% !important;
}

.u-before5of12 {
    margin-left: 41.66666666666667% !important;
}

.u-before1of2,
.u-before2of4,
.u-before3of6,
.u-before4of8,
.u-before5of10,
.u-before6of12 {
    margin-left: 50% !important;
}

.u-before7of12 {
    margin-left: 58.333333333333336% !important;
}

.u-before3of5,
.u-before6of10 {
    margin-left: 60% !important;
}

.u-before5of8 {
    margin-left: 62.5% !important;
}

.u-before2of3,
.u-before4of6,
.u-before8of12 {
    margin-left: 66.66666666666666% !important;
}

.u-before7of10 {
    margin-left: 70% !important;
}

.u-before3of4,
.u-before6of8,
.u-before9of12 {
    margin-left: 75% !important;
}

.u-before4of5,
.u-before8of10 {
    margin-left: 80% !important;
}

.u-before5of6,
.u-before10of12 {
    margin-left: 83.33333333333334% !important;
}

.u-before7of8 {
    margin-left: 87.5% !important;
}

.u-before9of10 {
    margin-left: 90% !important;
}

.u-before11of12 {
    margin-left: 91.66666666666666% !important;
}

/**
 * Offset: breakpoint 1 (small)
 *
 * Specify the proportional offset before an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 section
 */

@media (min-width:320px) and (max-width:640px) {
    .u-sm-beforeNone {
        margin-left: 0 !important;
    }

    .u-sm-before1of12 {
        margin-left: 8.333333333333332% !important;
    }

    .u-sm-before1of10 {
        margin-left: 10% !important;
    }

    .u-sm-before1of8 {
        margin-left: 12.5% !important;
    }

    .u-sm-before1of6,
    .u-sm-before2of12 {
        margin-left: 16.666666666666664% !important;
    }

    .u-sm-before1of5,
    .u-sm-before2of10 {
        margin-left: 20% !important;
    }

    .u-sm-before1of4,
    .u-sm-before2of8,
    .u-sm-before3of12 {
        margin-left: 25% !important;
    }

    .u-sm-before3of10 {
        margin-left: 30% !important;
    }

    .u-sm-before1of3,
    .u-sm-before2of6,
    .u-sm-before4of12 {
        margin-left: 33.33333333333333% !important;
    }

    .u-sm-before3of8 {
        margin-left: 37.5% !important;
    }

    .u-sm-before2of5,
    .u-sm-before4of10 {
        margin-left: 40% !important;
    }

    .u-sm-before5of12 {
        margin-left: 41.66666666666667% !important;
    }

    .u-sm-before1of2,
    .u-sm-before2of4,
    .u-sm-before3of6,
    .u-sm-before4of8,
    .u-sm-before5of10,
    .u-sm-before6of12 {
        margin-left: 50% !important;
    }

    .u-sm-before7of12 {
        margin-left: 58.333333333333336% !important;
    }

    .u-sm-before3of5,
    .u-sm-before6of10 {
        margin-left: 60% !important;
    }

    .u-sm-before5of8 {
        margin-left: 62.5% !important;
    }

    .u-sm-before2of3,
    .u-sm-before4of6,
    .u-sm-before8of12 {
        margin-left: 66.66666666666666% !important;
    }

    .u-sm-before7of10 {
        margin-left: 70% !important;
    }

    .u-sm-before3of4,
    .u-sm-before6of8,
    .u-sm-before9of12 {
        margin-left: 75% !important;
    }

    .u-sm-before4of5,
    .u-sm-before8of10 {
        margin-left: 80% !important;
    }

    .u-sm-before5of6,
    .u-sm-before10of12 {
        margin-left: 83.33333333333334% !important;
    }

    .u-sm-before7of8 {
        margin-left: 87.5% !important;
    }

    .u-sm-before9of10 {
        margin-left: 90% !important;
    }

    .u-sm-before11of12 {
        margin-left: 91.66666666666666% !important;
    }
}

/**
 * Offset: breakpoint 2 (medium)
 *
 * Specify the proportional offset before an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 section
 */

@media (min-width:640px) and (max-width:960px) {
    .u-md-beforeNone {
        margin-left: 0 !important;
    }

    .u-md-before1of12 {
        margin-left: 8.333333333333332% !important;
    }

    .u-md-before1of10 {
        margin-left: 10% !important;
    }

    .u-md-before1of8 {
        margin-left: 12.5% !important;
    }

    .u-md-before1of6,
    .u-md-before2of12 {
        margin-left: 16.666666666666664% !important;
    }

    .u-md-before1of5,
    .u-md-before2of10 {
        margin-left: 20% !important;
    }

    .u-md-before1of4,
    .u-md-before2of8,
    .u-md-before3of12 {
        margin-left: 25% !important;
    }

    .u-md-before3of10 {
        margin-left: 30% !important;
    }

    .u-md-before1of3,
    .u-md-before2of6,
    .u-md-before4of12 {
        margin-left: 33.33333333333333% !important;
    }

    .u-md-before3of8 {
        margin-left: 37.5% !important;
    }

    .u-md-before2of5,
    .u-md-before4of10 {
        margin-left: 40% !important;
    }

    .u-md-before5of12 {
        margin-left: 41.66666666666667% !important;
    }

    .u-md-before1of2,
    .u-md-before2of4,
    .u-md-before3of6,
    .u-md-before4of8,
    .u-md-before5of10,
    .u-md-before6of12 {
        margin-left: 50% !important;
    }

    .u-md-before7of12 {
        margin-left: 58.333333333333336% !important;
    }

    .u-md-before3of5,
    .u-md-before6of10 {
        margin-left: 60% !important;
    }

    .u-md-before5of8 {
        margin-left: 62.5% !important;
    }

    .u-md-before2of3,
    .u-md-before4of6,
    .u-md-before8of12 {
        margin-left: 66.66666666666666% !important;
    }

    .u-md-before7of10 {
        margin-left: 70% !important;
    }

    .u-md-before3of4,
    .u-md-before6of8,
    .u-md-before9of12 {
        margin-left: 75% !important;
    }

    .u-md-before4of5,
    .u-md-before8of10 {
        margin-left: 80% !important;
    }

    .u-md-before5of6,
    .u-md-before10of12 {
        margin-left: 83.33333333333334% !important;
    }

    .u-md-before7of8 {
        margin-left: 87.5% !important;
    }

    .u-md-before9of10 {
        margin-left: 90% !important;
    }

    .u-md-before11of12 {
        margin-left: 91.66666666666666% !important;
    }
}

/**
 * Offset: breakpoint 3 (large)
 *
 * Specify the proportional offset before an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 section
 */

@media (min-width:960px) {
    .u-lg-beforeNone {
        margin-left: 0 !important;
    }

    .u-lg-before1of12 {
        margin-left: 8.333333333333332% !important;
    }

    .u-lg-before1of10 {
        margin-left: 10% !important;
    }

    .u-lg-before1of8 {
        margin-left: 12.5% !important;
    }

    .u-lg-before1of6,
    .u-lg-before2of12 {
        margin-left: 16.666666666666664% !important;
    }

    .u-lg-before1of5,
    .u-lg-before2of10 {
        margin-left: 20% !important;
    }

    .u-lg-before1of4,
    .u-lg-before2of8,
    .u-lg-before3of12 {
        margin-left: 25% !important;
    }

    .u-lg-before3of10 {
        margin-left: 30% !important;
    }

    .u-lg-before1of3,
    .u-lg-before2of6,
    .u-lg-before4of12 {
        margin-left: 33.33333333333333% !important;
    }

    .u-lg-before3of8 {
        margin-left: 37.5% !important;
    }

    .u-lg-before2of5,
    .u-lg-before4of10 {
        margin-left: 40% !important;
    }

    .u-lg-before5of12 {
        margin-left: 41.66666666666667% !important;
    }

    .u-lg-before1of2,
    .u-lg-before2of4,
    .u-lg-before3of6,
    .u-lg-before4of8,
    .u-lg-before5of10,
    .u-lg-before6of12 {
        margin-left: 50% !important;
    }

    .u-lg-before7of12 {
        margin-left: 58.333333333333336% !important;
    }

    .u-lg-before3of5,
    .u-lg-before6of10 {
        margin-left: 60% !important;
    }

    .u-lg-before5of8 {
        margin-left: 62.5% !important;
    }

    .u-lg-before2of3,
    .u-lg-before4of6,
    .u-lg-before8of12 {
        margin-left: 66.66666666666666% !important;
    }

    .u-lg-before7of10 {
        margin-left: 70% !important;
    }

    .u-lg-before3of4,
    .u-lg-before6of8,
    .u-lg-before9of12 {
        margin-left: 75% !important;
    }

    .u-lg-before4of5,
    .u-lg-before8of10 {
        margin-left: 80% !important;
    }

    .u-lg-before5of6,
    .u-lg-before10of12 {
        margin-left: 83.33333333333334% !important;
    }

    .u-lg-before7of8 {
        margin-left: 87.5% !important;
    }

    .u-lg-before9of10 {
        margin-left: 90% !important;
    }

    .u-lg-before11of12 {
        margin-left: 91.66666666666666% !important;
    }
}

.u-posAbsolute {
    position: absolute !important;
}

/**
 * Pins to all corners by default. But when a width and/or height are
 * provided, the element will be centered in its nearest relatively-positioned
 * ancestor.
 */

.u-posAbsoluteCenter {
    bottom: 0 !important;
    left: 0 !important;
    margin: auto !important;
    position: absolute !important;
    right: 0 !important;
    top: 0 !important;
}

/**
 * 1. Make sure fixed elements are promoted into a new layer, for performance
 *    reasons.
 */

.u-posFixed {
    position: fixed !important;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    /* 1 */
}

.u-posRelative {
    position: relative !important;
}

.u-posStatic {
    position: static !important;
}

/**
 * Sizing utilities
 */

/* Intrinsic widths
   ========================================================================== */

/**
 * Make an element shrink wrap its content.
 */

.u-sizeFit,
.u-sizeFitAlt {
    display: block !important;
    float: left !important;
    width: auto !important;
}

.u-sizeFitAlt {
    float: right !important;
}

/**
 * Make an element fill the remaining space.
 * N.B. This will hide overflow.
 */

.u-sizeFill {
    display: block !important;
    overflow: hidden !important;
    width: auto !important;
}

/**
 * An alternative method to make an element fill the remaining space.
 * N.B. Do not use if child elements might be wider than the remaining space.
 * In Chrome, Safari, and Firefox it results in undesired layout.
 */

.u-sizeFillAlt {
    display: table-cell !important;
    max-width: 100% !important;
    width: 10000px !important;
}

/**
 * Make an element the width of its parent.
 */

.u-sizeFull {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important;
}

/* Proportional widths
   ========================================================================== */

/**
 * Specify the proportional width of an object.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
 */

.u-size1of12 {
    width: 8.333333333333332% !important;
}

.u-size1of10 {
    width: 10% !important;
}

.u-size1of8 {
    width: 12.5% !important;
}

.u-size1of6,
.u-size2of12 {
    width: 16.666666666666664% !important;
}

.u-size1of5,
.u-size2of10 {
    width: 20% !important;
}

.u-size1of4,
.u-size2of8,
.u-size3of12 {
    width: 25% !important;
}

.u-size3of10 {
    width: 30% !important;
}

.u-size1of3,
.u-size2of6,
.u-size4of12 {
    width: 33.33333333333333% !important;
}

.u-size3of8 {
    width: 37.5% !important;
}

.u-size2of5,
.u-size4of10 {
    width: 40% !important;
}

.u-size5of12 {
    width: 41.66666666666667% !important;
}

.u-size1of2,
.u-size2of4,
.u-size3of6,
.u-size4of8,
.u-size5of10,
.u-size6of12 {
    width: 50% !important;
}

.u-size7of12 {
    width: 58.333333333333336% !important;
}

.u-size3of5,
.u-size6of10 {
    width: 60% !important;
}

.u-size5of8 {
    width: 62.5% !important;
}

.u-size2of3,
.u-size4of6,
.u-size8of12 {
    width: 66.66666666666666% !important;
}

.u-size7of10 {
    width: 70% !important;
}

.u-size3of4,
.u-size6of8,
.u-size9of12 {
    width: 75% !important;
}

.u-size4of5,
.u-size8of10 {
    width: 80% !important;
}

.u-size5of6,
.u-size10of12 {
    width: 83.33333333333334% !important;
}

.u-size7of8 {
    width: 87.5% !important;
}

.u-size9of10 {
    width: 90% !important;
}

.u-size11of12 {
    width: 91.66666666666666% !important;
}

/**
 * Size: breakpoint 1 (small)
 */

@media (min-width:320px) and (max-width:640px) {
    /**
     * Make an element shrink wrap its content.
     */

    .u-sm-sizeFit,
    .u-sm-sizeFitAlt {
        display: block !important;
        float: left !important;
        width: auto !important;
    }

    .u-sm-sizeFitAlt {
        float: right !important;
    }

    /**
     * Make an element fill the remaining space.
     * N.B. This will hide overflow.
     */

    .u-sm-sizeFill {
        display: block !important;
        overflow: hidden !important;
        width: auto !important;
    }

    /**
     * An alternative method to make an element fill the remaining space.
     * N.B. Do not use if child elements might be wider than the remaining space.
     * In Chrome, Safari, and Firefox it results in undesired layout.
     */

    .u-sm-sizeFillAlt {
        display: table-cell !important;
        max-width: 100% !important;
        width: 10000px !important;
    }

    /**
     * Make an element the width of its parent.
     */

    .u-sm-sizeFull {
        box-sizing: border-box !important;
        display: block !important;
        width: 100% !important;
    }

    /* Proportional widths: breakpoint 1 (small)
       ========================================================================== */

    /**
     * Specify the proportional width of an object.
     * Intentional redundancy build into each set of unit classes.
     * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
     */

    .u-sm-size1of12 {
        width: 8.333333333333332% !important;
    }

    .u-sm-size1of10 {
        width: 10% !important;
    }

    .u-sm-size1of8 {
        width: 12.5% !important;
    }

    .u-sm-size1of6,
    .u-sm-size2of12 {
        width: 16.666666666666664% !important;
    }

    .u-sm-size1of5,
    .u-sm-size2of10 {
        width: 20% !important;
    }

    .u-sm-size1of4,
    .u-sm-size2of8,
    .u-sm-size3of12 {
        width: 25% !important;
    }

    .u-sm-size3of10 {
        width: 30% !important;
    }

    .u-sm-size1of3,
    .u-sm-size2of6,
    .u-sm-size4of12 {
        width: 33.33333333333333% !important;
    }

    .u-sm-size3of8 {
        width: 37.5% !important;
    }

    .u-sm-size2of5,
    .u-sm-size4of10 {
        width: 40% !important;
    }

    .u-sm-size5of12 {
        width: 41.66666666666667% !important;
    }

    .u-sm-size1of2,
    .u-sm-size2of4,
    .u-sm-size3of6,
    .u-sm-size4of8,
    .u-sm-size5of10,
    .u-sm-size6of12 {
        width: 50% !important;
    }

    .u-sm-size7of12 {
        width: 58.333333333333336% !important;
    }

    .u-sm-size3of5,
    .u-sm-size6of10 {
        width: 60% !important;
    }

    .u-sm-size5of8 {
        width: 62.5% !important;
    }

    .u-sm-size2of3,
    .u-sm-size4of6,
    .u-sm-size8of12 {
        width: 66.66666666666666% !important;
    }

    .u-sm-size7of10 {
        width: 70% !important;
    }

    .u-sm-size3of4,
    .u-sm-size6of8,
    .u-sm-size9of12 {
        width: 75% !important;
    }

    .u-sm-size4of5,
    .u-sm-size8of10 {
        width: 80% !important;
    }

    .u-sm-size5of6,
    .u-sm-size10of12 {
        width: 83.33333333333334% !important;
    }

    .u-sm-size7of8 {
        width: 87.5% !important;
    }

    .u-sm-size9of10 {
        width: 90% !important;
    }

    .u-sm-size11of12 {
        width: 91.66666666666666% !important;
    }
}

/**
 * Size: breakpoint 2 (medium)
 */

@media (min-width:640px) and (max-width:960px) {
    /**
     * Make an element shrink wrap its content.
     */

    .u-md-sizeFit,
    .u-md-sizeFitAlt {
        display: block !important;
        float: left !important;
        width: auto !important;
    }

    .u-md-sizeFitAlt {
        float: right !important;
    }

    /**
     * Make an element fill the remaining space.
     * N.B. This will hide overflow.
     */

    .u-md-sizeFill {
        display: block !important;
        overflow: hidden !important;
        width: auto !important;
    }

    /**
     * An alternative method to make an element fill the remaining space.
     * N.B. Do not use if child elements might be wider than the remaining space.
     * In Chrome, Safari, and Firefox it results in undesired layout.
     */

    .u-md-sizeFillAlt {
        display: table-cell !important;
        max-width: 100% !important;
        width: 10000px !important;
    }

    /**
     * Make an element the width of its parent.
     */

    .u-md-sizeFull {
        box-sizing: border-box !important;
        display: block !important;
        width: 100% !important;
    }

    /* Proportional widths: breakpoint 2 (medium)
       ========================================================================== */

    /**
     * Specify the proportional width of an object.
     * Intentional redundancy build into each set of unit classes.
     * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
     */

    .u-md-size1of12 {
        width: 8.333333333333332% !important;
    }

    .u-md-size1of10 {
        width: 10% !important;
    }

    .u-md-size1of8 {
        width: 12.5% !important;
    }

    .u-md-size1of6,
    .u-md-size2of12 {
        width: 16.666666666666664% !important;
    }

    .u-md-size1of5,
    .u-md-size2of10 {
        width: 20% !important;
    }

    .u-md-size1of4,
    .u-md-size2of8,
    .u-md-size3of12 {
        width: 25% !important;
    }

    .u-md-size3of10 {
        width: 30% !important;
    }

    .u-md-size1of3,
    .u-md-size2of6,
    .u-md-size4of12 {
        width: 33.33333333333333% !important;
    }

    .u-md-size3of8 {
        width: 37.5% !important;
    }

    .u-md-size2of5,
    .u-md-size4of10 {
        width: 40% !important;
    }

    .u-md-size5of12 {
        width: 41.66666666666667% !important;
    }

    .u-md-size1of2,
    .u-md-size2of4,
    .u-md-size3of6,
    .u-md-size4of8,
    .u-md-size5of10,
    .u-md-size6of12 {
        width: 50% !important;
    }

    .u-md-size7of12 {
        width: 58.333333333333336% !important;
    }

    .u-md-size3of5,
    .u-md-size6of10 {
        width: 60% !important;
    }

    .u-md-size5of8 {
        width: 62.5% !important;
    }

    .u-md-size2of3,
    .u-md-size4of6,
    .u-md-size8of12 {
        width: 66.66666666666666% !important;
    }

    .u-md-size7of10 {
        width: 70% !important;
    }

    .u-md-size3of4,
    .u-md-size6of8,
    .u-md-size9of12 {
        width: 75% !important;
    }

    .u-md-size4of5,
    .u-md-size8of10 {
        width: 80% !important;
    }

    .u-md-size5of6,
    .u-md-size10of12 {
        width: 83.33333333333334% !important;
    }

    .u-md-size7of8 {
        width: 87.5% !important;
    }

    .u-md-size9of10 {
        width: 90% !important;
    }

    .u-md-size11of12 {
        width: 91.66666666666666% !important;
    }
}

/**
 * Size: breakpoint 3 (large)
 */

@media (min-width:960px) {
    /**
     * Make an element shrink wrap its content.
     */

    .u-lg-sizeFit,
    .u-lg-sizeFitAlt {
        display: block !important;
        float: left !important;
        width: auto !important;
    }

    .u-lg-sizeFitAlt {
        float: right !important;
    }

    /**
     * Make an element fill the remaining space.
     * N.B. This will hide overflow.
     */

    .u-lg-sizeFill {
        display: block !important;
        overflow: hidden !important;
        width: auto !important;
    }

    /**
     * An alternative method to make an element fill the remaining space.
     * N.B. Do not use if child elements might be wider than the remaining space.
     * In Chrome, Safari, and Firefox it results in undesired layout.
     */

    .u-lg-sizeFillAlt {
        display: table-cell !important;
        max-width: 100% !important;
        width: 10000px !important;
    }

    /**
     * Make an element the width of its parent.
     */

    .u-lg-sizeFull {
        box-sizing: border-box !important;
        display: block !important;
        width: 100% !important;
    }

    /* Proportional widths: breakpoint 3 (large)
       ========================================================================== */

    /**
     * Specify the proportional width of an object.
     * Intentional redundancy build into each set of unit classes.
     * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
     */

    .u-lg-size1of12 {
        width: 8.333333333333332% !important;
    }

    .u-lg-size1of10 {
        width: 10% !important;
    }

    .u-lg-size1of8 {
        width: 12.5% !important;
    }

    .u-lg-size1of6,
    .u-lg-size2of12 {
        width: 16.666666666666664% !important;
    }

    .u-lg-size1of5,
    .u-lg-size2of10 {
        width: 20% !important;
    }

    .u-lg-size1of4,
    .u-lg-size2of8,
    .u-lg-size3of12 {
        width: 25% !important;
    }

    .u-lg-size3of10 {
        width: 30% !important;
    }

    .u-lg-size1of3,
    .u-lg-size2of6,
    .u-lg-size4of12 {
        width: 33.33333333333333% !important;
    }

    .u-lg-size3of8 {
        width: 37.5% !important;
    }

    .u-lg-size2of5,
    .u-lg-size4of10 {
        width: 40% !important;
    }

    .u-lg-size5of12 {
        width: 41.66666666666667% !important;
    }

    .u-lg-size1of2,
    .u-lg-size2of4,
    .u-lg-size3of6,
    .u-lg-size4of8,
    .u-lg-size5of10,
    .u-lg-size6of12 {
        width: 50% !important;
    }

    .u-lg-size7of12 {
        width: 58.333333333333336% !important;
    }

    .u-lg-size3of5,
    .u-lg-size6of10 {
        width: 60% !important;
    }

    .u-lg-size5of8 {
        width: 62.5% !important;
    }

    .u-lg-size2of3,
    .u-lg-size4of6,
    .u-lg-size8of12 {
        width: 66.66666666666666% !important;
    }

    .u-lg-size7of10 {
        width: 70% !important;
    }

    .u-lg-size3of4,
    .u-lg-size6of8,
    .u-lg-size9of12 {
        width: 75% !important;
    }

    .u-lg-size4of5,
    .u-lg-size8of10 {
        width: 80% !important;
    }

    .u-lg-size5of6,
    .u-lg-size10of12 {
        width: 83.33333333333334% !important;
    }

    .u-lg-size7of8 {
        width: 87.5% !important;
    }

    .u-lg-size9of10 {
        width: 90% !important;
    }

    .u-lg-size11of12 {
        width: 91.66666666666666% !important;
    }
}

/**
 * Word breaking
 *
 * Break strings when their length exceeds the width of their container.
 */

.u-textBreak {
    word-wrap: break-word !important;
}

/**
 * Horizontal text alignment
 */

.u-textCenter {
    text-align: center !important;
}

.u-textLeft {
    text-align: left !important;
}

.u-textRight {
    text-align: right !important;
}

/**
 * Inherit the ancestor's text color.
 */

.u-textInheritColor {
    color: inherit !important;
}

/**
 * Enables font kerning in all browsers.
 * http://blog.typekit.com/2014/02/05/kerning-on-the-web/
 *
 * 1. Chrome (not Windows), Firefox, Safari 6+, iOS, Android
 * 2. Chrome (not Windows), Firefox, IE 10+
 * 3. Safari 7 and future browsers
 */

.u-textKern {
    text-rendering: optimizeLegibility;
    /* 1 */
    -webkit-font-feature-settings: "kern" 1;
    -moz-font-feature-settings: "kern" 1;
    font-feature-settings: "kern" 1;
    /* 2 */
    -webkit-font-kerning: normal;
    -moz-font-kerning: normal;
    font-kerning: normal;
    /* 3 */
}

/**
 * Prevent whitespace wrapping
 */

.u-textNoWrap {
    white-space: nowrap !important;
}

/**
 * Text truncation
 *
 * Prevent text from wrapping onto multiple lines, and truncate with an
 * ellipsis.
 *
 * 1. Ensure that the node has a maximum width after which truncation can
 *    occur.
 * 2. Fix for IE 8/9 if `word-wrap: break-word` is in effect on ancestor
 *    nodes.
 */

.u-textTruncate {
    max-width: 100%;
    /* 1 */
    overflow: hidden !important;
    text-overflow: ellipsis !important;
    white-space: nowrap !important;
    word-wrap: normal !important;
    /* 2 */
}

/** @define Arrange */



/**
 * This component lets you lay out a row of cells in various ways. You can
 * specify whether a cell should be wide enough to fit its content, or take up
 * the remaining space in the row. It's also possible to give all cells an
 * equal width, and to control their vertical alignment.
 */

/**
 * 1. Protect against the component expanding beyond the confines of its
 *    container if properties affecting the box-model are applied to the
 *    component. Mainly necessary because of (5).
 * 2. Rely on table layout.
 * 3. Zero out the default spacing that might be on an element (e.g., `ul`).
 * 4. Make sure the component fills at least the full width of its parent.
 * 5. Reset the table-layout algorithm in case a component is nested.
 */

.Arrange {
    box-sizing: border-box;
    /* 1 */
    display: table;
    /* 2 */
    margin: 0;
    /* 3 */
    min-width: 100%;
    /* 4 */
    padding: 0;
    /* 3 */
    table-layout: auto;
    /* 5 */
}

/**
 * There are two possible types of child. `sizeFill` will expand to fill all
 * of the remaining space not filled by `sizeFit` elements.
 *
 * 1. Zero out any default spacing that might be on an element (e.g., `li`);
 *    Margin has no effect when coupled with `display: table-cell`.
 * 2. All cells are top-aligned by default
 */

.Arrange-sizeFill,
.Arrange-sizeFit {
    display: table-cell;
    padding: 0;
    /* 1 */
    vertical-align: top;
    /* 2 */
}

/**
 * Make sure the main content block expands to fill the remaining space.
 */

.Arrange-sizeFill {
    width: 100%;
}

/**
 * Where possible, protect against large images breaking the layout. Prevent them from
 * exceeding the width of the main content block by making them fluid.
 *
 * Only work for all browsers with the `Arrange--equally` variant. For Firefox
 * and IE to constrain image dimensions for other layouts, large images will
 * need their width set to `100%`.
 */

.Arrange-sizeFill img {
    height: auto;
    max-width: 100%;
}

/**
 * Defend against a side-effect of this layout pattern: images in
 * 'Arrange-sizeFit' cannot be fluid, otherwise they lose their ability to
 * provide size to a cell.
 */

.Arrange-sizeFit img {
    max-width: none !important;
    width: auto !important;
}

/* Vertical alignment modifiers
   ========================================================================== */

.Arrange--middle .Arrange-sizeFill,
.Arrange--middle .Arrange-sizeFit {
    vertical-align: middle;
}

.Arrange--bottom .Arrange-sizeFill,
.Arrange--bottom .Arrange-sizeFit {
    vertical-align: bottom;
}

/* Equal-width modifier
   ========================================================================== */

/**
 * This layout algorithm will create equal-width table cells, irrespective of
 * the width of their content.
 */

.Arrange--equal {
    table-layout: fixed;
}

/**
 * Give the cells an equal width. This value ensures that Arrange is still 100%
 * wide when gutters are used in conjunctions with equal-width cells.
 *
 * It's recommended that only 'Arrange-sizeFill' be used for equal width cells.
 * Their inner images will automatically be responsive.
 */

.Arrange--equal > .Arrange-sizeFill,
.Arrange--equal > .Arrange-sizeFit {
    width: 1%;
}

/* Gutter modifier
   ========================================================================== */

/**
 * Add a gutter between cells
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */

.Arrange--withGutter {
    margin: 0 -5px;
}

.Arrange--withGutter > .Arrange-sizeFit,
.Arrange--withGutter > .Arrange-sizeFill {
    padding: 0 5px;
}

/** @define Button; use strict */



/**
 * The button classes are best applied to links, buttons, and submit inputs.
 * These components can be used in forms, as calls to action, or as part of the
 * general UI of the site/app.
 */

/**
 * 1. Corrects inability to style clickable `input` types in iOS.
 * 2. Normalize `box-sizing` across all elements that this component could be
 *    applied to.
 * 3. Inherit text color from ancestor.
 * 4. Inherit font styles from ancestor.
 * 5. Normalize `line-height`. For `input`, it can't be changed from `normal` in Firefox 4+.
 * 6. Prevent button text from being selectable.
 * 7. Make sure `input` will wrap text across multiple lines.
 */

.Button {
    -webkit-appearance: none;
    /* 1 */
    background: transparent;
    border-color: currentcolor;
    border-style: solid;
    border-width: 1px;
    box-sizing: border-box;
    /* 2 */
    color: inherit;
    /* 3 */
    cursor: pointer;
    display: inline-block;
    font: inherit;
    /* 4 */
    line-height: normal;
    /* 5 */
    margin: 0;
    padding: 0.4em 0.75em;
    position: relative;
    text-align: center;
    text-decoration: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    /* 6 */
    white-space: normal;
    /* 7 */
}

/**
 * Remove excess padding and border in Firefox 4+
 */

.Button::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/**
 * Work around a Firefox/IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 */

.Button:focus {
    outline: 1px dotted;
    outline: 5px auto -webkit-focus-ring-color;
}

/**
 * UI states
 */

.Button:hover,
.Button:focus,
.Button:active {
    text-decoration: none;
}

.Button:disabled,
.Button.is-disabled {
    cursor: default;
    opacity: 0.6;
}

/** @define FlexEmbed; use strict */

/**
 * Flexible media embeds
 *
 * For use with media embeds – such as videos, slideshows, or even images –
 * that need to retain a specific aspect ratio but adapt to the width of their
 * containing element.
 *
 * Based on: http://alistapart.com/article/creating-intrinsic-ratios-for-video
 */

.FlexEmbed {
    display: block;
    overflow: hidden;
    position: relative;
}

/**
 * The aspect-ratio hack is applied to an empty element because it allows
 * the component to respect `max-height`. Default aspect ratio is 1:1.
 */

.FlexEmbed-ratio {
    display: block;
    padding-bottom: 100%;
    width: 100%;
}

/**
 * Modifier: 3:1 aspect ratio
 */

.FlexEmbed-ratio--3by1 {
    padding-bottom: 33.33333333333333%;
}

/**
 * Modifier: 2:1 aspect ratio
 */

.FlexEmbed-ratio--2by1 {
    padding-bottom: 50%;
}

/**
 * Modifier: 16:9 aspect ratio
 */

.FlexEmbed-ratio--16by9 {
    padding-bottom: 56.25%;
}

/**
 * Modifier: 4:3 aspect ratio
 */

.FlexEmbed-ratio--4by3 {
    padding-bottom: 75%;
}

/**
 * Fit the content to the aspect ratio
 */

.FlexEmbed-content {
    bottom: 0;
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
}

/** @define Grid; use strict */



/**
 * Core grid component
 *
 * DO NOT apply dimension or offset utilities to the `Grid` element. All cell
 * widths and offsets should be applied to child grid cells.
 */

/* Grid container
   ========================================================================== */

/**
 * All content must be contained within child `Grid-cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 * 2. Remove inter-cell whitespace that appears between `inline-block` child
 *    elements.
 * 3. Ensure consistent default alignment.
 */

.Grid {
    display: block;
    /* 1 */
    font-size: 0;
    /* 2 */
    margin: 0;
    /* 1 */
    padding: 0;
    /* 1 */
    text-align: left;
    /* 3 */
}

/**
 * Modifier: center align all grid cells
 */

.Grid--alignCenter {
    text-align: center;
}

/**
 * Modifier: right align all grid cells
 */

.Grid--alignRight {
    text-align: right;
}

/**
 * Modifier: middle-align grid cells
 */

.Grid--alignMiddle > .Grid-cell {
    vertical-align: middle;
}

/**
 * Modifier: bottom-align grid cells
 */

.Grid--alignBottom > .Grid-cell {
    vertical-align: bottom;
}

/**
 * Modifier: gutters
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */

.Grid--withGutter {
    margin: 0 -10px;
}

.Grid--withGutter > .Grid-cell {
    padding: 0 10px;
}

/* Grid cell
   ========================================================================== */

/**
 * No explicit width by default. Rely on combining `Grid-cell` with a dimension
 * utility or a component class that extends 'grid'.
 *
 * 1. Fundamentals of the non-float grid layout.
 * 2. Reset font size change made in `Grid`.
 * 3. Keeps content correctly aligned with the grid direction.
 * 4. Controls vertical positioning of units.
 * 5. Make cells full-width by default.
 */

.Grid-cell {
    box-sizing: border-box;
    display: inline-block;
    /* 1 */
    font-size: 1rem;
    /* 2 */
    margin: 0;
    padding: 0;
    text-align: left;
    /* 3 */
    vertical-align: top;
    /* 4 */
    width: 100%;
    /* 5 */
}

/**
 * Modifier: horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `Grid` object.
 */

.Grid-cell--center {
    display: block;
    margin: 0 auto;
}
